{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Exercise 5.2 - Intro to ML - Regression","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"dq3zTkSVGtNt","colab_type":"text"},"source":["# Data Science for Construction, Architecture and Engineering\n","### Week 5 - Introduction to Machine Learning\n","## Exercise Set 5.2 - Introduction to ML - Regression\n","\n","This exercise is related to the second half of Week 5 videos. Using the same data (Project Building Data Genome) and packages (sklearn, matplotlib) as in the videos, the following tasks about regression.\n","\n","There is an introduction video available to explain the process of using this exercise video.\n","\n","The developers of this exercise are Ananya Joshi, a Fulbright Scholar to Singapore for 2019-2020 and Mahmoud Abdelrahman, a Ph.D. student at NUS and a teaching assistant of this course.\n"]},{"cell_type":"markdown","metadata":{"id":"AhyVEnEh6Q0d","colab_type":"text"},"source":["#### Setup the environment\n","\n","Let's set up the environment that is similar to the colab notebooks from the videos and read the data first:"]},{"cell_type":"code","metadata":{"id":"EXOrJhIrcSUn","colab_type":"code","colab":{}},"source":["#import packages\n","import pandas as pd\n","import os\n","import matplotlib.pyplot as plt\n","import matplotlib"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R_Px9CAOmMr9","colab_type":"code","colab":{}},"source":["#import machine learning modules\n","import sklearn\n","from sklearn import metrics\n","from sklearn.neighbors import KNeighborsRegressor\n","\n","from scipy.cluster.vq import kmeans, vq, whiten\n","from scipy.spatial.distance import cdist\n","import numpy as np\n","from datetime import datetime\n","import seaborn as sns"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BcIDi9ezmPRF","colab_type":"code","colab":{}},"source":["#mount the drive\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","# Change directory location (hint: chdir)\n","os.chdir(\"/content/gdrive/My Drive/EDX Data Science for Construction, Architecture and Engineering/Week 3 - Construction - Pandas Fundamentals/\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uGTWcGW9cTpe","colab_type":"text"},"source":["## Exercise 05.2.1 - Preprocessing Data For Regression\n","\n","### Preprocessing weather data:\n","In the first part of this exercise, we'd like you to load the `weahther0.csv` file from the Week 3 BDG data (drive mounted already). Then you need to resample the data hourly, and extract only the `'TemperatureC'` as our feature.\n","\n","Feature name | Feature type\n","--- | ---\n","TemperatureC | numerical (float)\n","\n","Next you are asked to extract additional features such as hours of the day, and day of the week to enhance our prediction model. \n","\n","Feature name | Feature type\n","--- | ---\n","Hour_of_the_day | categorical \n","Day_of_the_week | categorical\n","\n","\n","\n","**Hint1:** There are some [outliers](https://en.wikipedia.org/wiki/Outlier) that need to be removed first -- We can boxplot the data to figure out these outliers as follows:\n","\n","`weather_hourly[['TemperatureC']].boxplot()`\n","\n","**Hint2:** [Categorical data](https://www.kaggle.com/tags/categorical-data) are observations that fall into discrete categories. For example: days of the week, months of the year, climate seasons, gender and so on. To make use of such data type in Machine Learning, each category should be first [encoded](https://towardsdatascience.com/encoding-categorical-features-21a2651a065c).\n","\n","**Hint3:** Dummify the variables. \n"]},{"cell_type":"code","metadata":{"id":"pE0g5SJkoRRY","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE -- you can use the comments below as a guide to help you stage the parts of the solution\n","#load the weather file and parse dates\n","\n","# Extract only the 'TemperatureC' column\n","\n","# Check for outliers -- see Hint 1\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"z7-iCmaVjLvX","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE -- you can use the comments below as a guide to help you stage the parts of the solution\n","# Remove temperature outliers > -40 degrees\n","\n","# Resample the weather data hourly and Fill gaps \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RFsv_o7wunt4","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE -- you can use the comments below as a guide to help you stage the parts of the solution\n","# Lets plot the pre-processed data \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"q5NNDtgUkbln","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE -- you can use the comments below as a guide to help you stage the parts of the solution\n","# lets extract hour of the day and dayofweek for each data item -- add them in a separate columns -- \n","# you can call these new columns \"H\" and \"D\" if you want the result to look like the Hint 4\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Is3XE16tzJ35","colab_type":"text"},"source":["**Hint4**: The result should look like this:\n","\n","| timestamp           |   TemperatureC |   H |   D |\n","|:--------------------|---------------:|----:|----:|\n","| 2015-01-01 00:00:00 |            2.8 |   0 |   3 |\n","| 2015-01-01 01:00:00 |            2.9 |   1 |   3 |\n","| 2015-01-01 02:00:00 |            2.8 |   2 |   3 |\n","| 2015-01-01 03:00:00 |            2.2 |   3 |   3 |\n","| 2015-01-01 04:00:00 |            2.2 |   4 |   3 |\n","\n","\n","**Now lets encode the H and D columns of this DataFrame in a new DataFrame called `feature_dataset`**\n","\n","**Hint5**: to dummify specific columns use the keyword `columns=['col1','col2',...]` while using [`get_dummies()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html)"]},{"cell_type":"code","metadata":{"id":"tldATdjQ8Jo1","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE -- you can use the comments below as a guide to help you stage the parts of the solution\n","# Now lets encode the H and D columns in a new DataFrame called feature_dataset\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XaCcNHafP8bV","colab_type":"text"},"source":["## Exercise 05.2.2 - Forecasting Energy Consumption\n","**Energy forecasting**\n","\n","Energy forecasting is used for efficient operation and management of building energy as well as cost effective purchase of electricity amongst other applications. \n","\n","Now let's apply this concept on the \"Office_Autumn.csv\" file. We will develop a medium-term electrical load forecasting (MTELF) that can accurately forecast next month's energy consumption based on the last three months. \n","\n","1. Load the metered data of the building `Office Autumn.csv`.\n","2. Write a function `runTheModel` in which the inputs are the features_dataset, the target_dataset, training months, and testing months, and the output is a dataframe of the KneighborRegressor Machine learning prediction `Actual v.s. Predicted`. Train the model on April, May and June, and Test the data on July.\n","\n","**Hint1**: The forecasting model structure will be as follows:\n","\n","\n","Features | Target\n","--- | ---\n","`TemperatureC` (float) <br><br>`H` (dummy variable) <br><br>`D` (dummy variable)| Energy consumption\n","\n","\n","**Note:** This function will be used in the following exercise.\n"]},{"cell_type":"code","metadata":{"id":"wTYpiSVA7TcB","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE -- you can use the comments below as a guide to help you stage the parts of the solution\n","#Load the Office Autumn.csv dataframe as target_dataset\n","\n","#Resample and fill gaps as done in the previous exercise.\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JTIuXbgRGkgy","colab_type":"code","colab":{}},"source":["def runTheModel(feature_dataset, target_dataset, train_months=[4,5,6], test_month=[7]):\n","  \"\"\"\n","  @Params:\n","    feature_dataset: is a pandas dataframe that contains all the features from the previous exercise. \n","    target_dataset: is the metered_data dataframe. \n","    train_months: (list) is a list of 3 sorted integers representing the training months.\n","    test_months: (list) is a list of integer representing the test month. \n","  @Return:\n","    This function returns a dataframe of the prediction vs actual result .\n","  \"\"\"\n","  # YOUR CODE HERE -- you can use the comments below as a guide to help you stage the parts of the solution\n","  # Select only data that exist in the train and test months -- hint: use isin(train_months) as in videos.\n","  \n","  # create X_train \n","\n","  # create y_train \n","\n","\n","  # create X_test\n","\n","  # create y_test\n","\n","\n","  # fit model\n","\n","  # use the model to make the prediction \n","\n","  # create a new dataframe that combines the actual data and the predicted data -- you can rename the columns so that the they are \"actual\" and \"predicted\"\n","\n","  #return predicted_vs_actual dataframe\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HSt-vdYk_Jje","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE -- you can use the comments below as a guide to help you stage the parts of the solution\n","# Call the function and plot the resulting predicted_vs_actual DataFrame\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dU0mTf93l3zK","colab_type":"text"},"source":["## Exercise 05.2.3 - Prediction Post-Processing and Visualization - Advanced (Optional)\n","\n","We often run machine learning models multiple times in different ways and calculate their success based on an error metric. In this advanced exercise, you can use the function created to run the model three times with different parameters each time. \n","\n","Using the previous function, we need to do 3 cycles of predicton and report the [Mean Absolute Percentage Error (MAPE)](https://en.wikipedia.org/wiki/Mean_absolute_percentage_error) of each cycle. \n","\n","<center><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/961e2d315e7269f820104c7b4b422f840104be2c\"><br>\n","Where $At$ is the actual value and $Ft$ is the forecast value\n","</center>\n","\n","Now, it is the time to use ML to predict three cycles of energy forecast months as follwos:\n","1. cycle1: train_months = [1,2,3] , test_month = [4]\n","2. cycle2: train_months = [4,5,6] , test_month = [7]\n","3. cycle3: train_months = [7,8,9] , test_month = [10]\n","\n","**The expected outputs:**\n","1. Use the regression model function to forcast the test_month out of the 3 previous train_monts. \n","2. Plot each result.\n","3. Plot the Mean Absolute Percentage Error (MAPE) of each cycle. "]},{"cell_type":"code","metadata":{"id":"w6IxR3nrtkma","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE -- you can use the comments below as a guide to help you stage the parts of the solution\n","# run modeling cycle1 = ...\n","\n","# cycle2 = ...\n","\n","# cycle3 = ...\n","\n","# plot each cycle\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9z4H98N7MUHA","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE -- you can use the comments below as a guide to help you stage the parts of the solution\n","# Calculate the error of each cycle\n","\n","# Calculate the absolute errors for cycle1\n","\n","\n","# Calculate the absolute errors for cycle2\n","\n","\n","# Calculate the absolute errors for cycle3\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7g332ljYM6bH","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE -- you can use the comments below as a guide to help you stage the parts of the solution\n","#Now lets plot the Mean Absolute Percentage Error MAPE.\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ncemg6TwY1n-","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}