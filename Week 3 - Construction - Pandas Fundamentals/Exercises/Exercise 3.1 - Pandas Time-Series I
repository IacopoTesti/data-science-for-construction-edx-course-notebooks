{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Exercise 3.1 - Pandas Time-Series I","provenance":[{"file_id":"1uq2X4cRby4X-fl7ofqXQaUS3PAhi5EDy","timestamp":1587624192268},{"file_id":"1MDZyOOsTbVMa1Vp-tiY1queO8q4gY6c0","timestamp":1584593223193}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"bIO90CQKXSDe","colab_type":"text"},"source":["# Data Science for Construction, Architecture and Engineering\n","\n","### Week 3 - Construction - Pandas Time-Series Data\n","\n","### Exercise Set 3.1 - Pandas Time-Series I\n","\n","This set of exercises is related to the first half of Week 3 videos. Using the same data (Project Building Data Genome) and packages (Pandas) as in the videos, the following tasks about time-series data will be tested: read, resample, truncate and plot.\n","\n","There is an introduction video available to explain the process of using this exercise video.\n","\n","The lead developer of this exercise is James Zhan Sicheng, a Ph.D. student at NUS and a teaching assistant of this course. "]},{"cell_type":"markdown","metadata":{"id":"iTrZjmkZZ-rE","colab_type":"text"},"source":["#### Setup the environment\n","The cell below is used to load the necessary packages for this exercise and setup the working directory. You will be asked to give the google drive authorization using through a given link."]},{"cell_type":"code","metadata":{"id":"evJcVnLZbFo5","colab_type":"code","colab":{}},"source":["import pandas as pd\n","from google.colab import drive\n","import os"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SF9wnvdgzwEC","colab_type":"code","colab":{}},"source":["drive.mount('/content/gdrive')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xmWizPiTzxQY","colab_type":"text"},"source":["In order to do the following exercises, we will go ahead and load the `meta` data file. Please note that we're using the `os` library again to navigate our file struture to *change the directory* to find the right files.\n","\n","**Important Note** - if you file structure is different than what you see below, then you will get an error. You will need to change your file locations *or* update the file path"]},{"cell_type":"code","metadata":{"id":"CaZpKu9ntWDW","colab_type":"code","colab":{}},"source":["# read meta data file as pandas dataframe and assign to the corresponding variables\n","os.chdir(\"/content/gdrive/My Drive/EDX Data Science for Construction, Architecture and Engineering/Week 3 - Construction - Pandas Fundamentals/\")\n","metadata = pd.read_csv('all_buildings_meta_data.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nfTuGCTQtcg-","colab_type":"code","colab":{}},"source":["os.chdir(\"/content/gdrive/My Drive/EDX Data Science for Construction, Architecture and Engineering/Week 3 - Construction - Pandas Fundamentals/meter_data/\")\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-9ZtoVcdN7Wp","colab_type":"text"},"source":["### Exercise 03.1.1 - Loading Meter Data from Specific Files\n","\n","Sometimes you need to grab and process data only from certain files to analyze. You want to filter those buildings that have certain attributes.\n"]},{"cell_type":"markdown","metadata":{"id":"cAIeD95zd6fx","colab_type":"text"},"source":["To get you started, we have provided a bit of code to help filter the names of several buildings that we want to focus on. This code:\n","- Reads the metadata as a Pandas DataFrame\n","- Identifies the `uid` of buildings located in **London (under weather 5)**, belonging to **Education** `industry` and having floor area larger than **10000** `sqm`"]},{"cell_type":"code","metadata":{"id":"jLh0x4OqJdzc","colab_type":"code","colab":{}},"source":["# Filter the dataframe with the three conditions ( the '&' sign means all the three conditions need to be satistified)\n","filtered = metadata[(metadata['newweatherfilename']=='weather5.csv')&(metadata['industry']=='Education')&(metadata['sqm']>10000)]\n","list_of_buildings = filtered['uid']\n","print(list_of_buildings)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4iXg1vBI2sM1","colab_type":"text"},"source":["In this exercise, use the `read_csv` function to read the following time-series data as Pandas DataFrame: \n","1. The meter data files of the three identified building in the `list_of_buildings`; \n","2. The corresponding weather data (`weather5.csv`)\n","\n","Tips:\n","- Set the timestamp column as index (`index_col`)\n","- Have the timestamp as datetime data type (`parse_dates`)\n","- Keep only the `TemperatureC` and `Humidity` for weather data (`usecols`)\n","\n","Create a DataFrame called `all_data` that holds the data from all the buildings and a DataFrame called `weather` that holds the weather data\n","\n","Hint: the `weather5.csv` file is in a different folder and the meter file names need a `.csv` in addition to the name in order to be loaded"]},{"cell_type":"code","metadata":{"id":"n7dPg30HN61z","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO LOAD THE THREE FILTERED FILES\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"h_aEE57Gt6hp","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO LOAD THE WEATHER DATA FILE\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UmwJi0U5O9az","colab_type":"text"},"source":["### Exercise 03.1.2 - Resampling Data\n","\n","As discussed in the videos, very often your IoT data will be at a higher resolution than what you need. In a spreadsheet, dealing with this issue can be tricky. With `Pandas`, its much more straightforward.\n","\n","In this exercise, use the DataFrames of meter and weather data you created to: \n","1. Calculate the monthly total consumptions and save in its own DataFrame called `all_data_monthly`\n","2. Find the average consumption for the three buildings \n","2. Resample the outdoor temperature (`temperatureC`) and humidity (`Humidity`) in the weather data to hourly resolution and store in a DataFrame labelled `weather_hourly`\n","\n","Hint: the Pandas `resample` function can be used to do the basic calculation (e.g. `mean`, `sum`) at different time resolution (e.g. `'H'`, `'M'`)"]},{"cell_type":"code","metadata":{"id":"vGumLGSxQaGG","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO PROCESS THE METER DATA FOR PART 1 \n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vt8h19nVCEc9","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO PROCESS THE METER DATA FOR PART 2\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"N2qGJgSqA_YB","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO PROCESS WEATHER DATA\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FSHeXl3unqyg","colab_type":"text"},"source":["### Exercise 03.1.3 - Plotting \n","\n","One of the most useful things to do in the early phase of the data analysis process is to visualize the data to find interesting behavior, outliers, etc.\n","\n","In this exercise, use the Pandas `truncate` and `plot` function to plot the hourly temperature and energy consumption trend of `UnivLab_Lester` for the month of January 2015.\n","\n","Here are some tips that you can use in your code:\n","- The `truncate` function returns the dataframe between the `before` and `after` date\n","- The pandas `plot` function returns a `matplotlib.axes.Axes` object, which can be referred to as place to plot\n","- The temperature and energy data are in different range. Therefore, it is better to have two y axis (`ax`), so that the both trends are clearly shown\n","- Try to differentiate the two lines with both `color` and `linestyle`\n","- A proper `legend` makes a plot with more than one lines more legible\n","- Axis ticks of larger `fontsize` are also preferred"]},{"cell_type":"code","metadata":{"id":"4JktsQFuO8mr","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO VISUALIZE THE DATA\n","\n"],"execution_count":0,"outputs":[]}]}