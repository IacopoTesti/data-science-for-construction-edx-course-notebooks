{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Exercise 3.2 - Pandas Time-Series II","provenance":[{"file_id":"1eykpWMyCzKbofQqmHEys5ID_iHbnfe9m","timestamp":1587624319325},{"file_id":"1UIWbYsTZpcSFiQ5SwdmPRWP3jPwEGuNl","timestamp":1584596201734},{"file_id":"1MDZyOOsTbVMa1Vp-tiY1queO8q4gY6c0","timestamp":1584593223193}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"VsE-w8SObLzD","colab_type":"text"},"source":["# Data Science for Construction, Architecture and Engineering\n","\n","### Week 3 - Construction - Pandas Time-Series Data\n","\n","### Exercise Set 3.2 - Pandas Time-Series II\n","\n"," This exercise is related to the second half of Week 3 videos. Using the same data (Project Building Data Genome) and packages (Pandas) as in the videos, the following tasks about time-series data will be tested: normalize, fillna and merge.\n","\n","There is an introduction video available to explain the process of using this exercise video.\n","\n","The lead developer of this exercise is James Zhan Sicheng, a Ph.D. student at NUS and a teaching assistant of this course."]},{"cell_type":"markdown","metadata":{"id":"Ji43HerfeAnC","colab_type":"text"},"source":["#### Setup the environment\n","The cell below is used to load the necessary packages for this exercise and setup the working directory. You will be asked to give the google drive authorization using through a given link."]},{"cell_type":"code","metadata":{"id":"evJcVnLZbFo5","colab_type":"code","colab":{}},"source":["import pandas as pd\n","from google.colab import drive\n","import os\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gUmIG32DIIXQ","colab_type":"text"},"source":["This time I want you to help me load the drive and change the directory to navigate to the place where the `all_buildings_meta_data.csv` file is:"]},{"cell_type":"code","metadata":{"id":"pKV2fpcjc4dk","colab_type":"code","colab":{}},"source":["# CODE GOES HERE TO MOUNT THE DRIVE \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZzydcHm_Hd-4","colab_type":"code","colab":{}},"source":["# CODE HERE TO USE `.chdir()` TO CHANGE THE DIRECTORY TO THE LOAD THE META DATA FILE\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vNGxoW5_fE_C","colab_type":"text"},"source":["### Exercise 03.2.1 - Filtering Meta Data\n","\n","Once again in this exercise, we want to focus on certain buildings found in the building data genome. This time we will give you the criteria and you write the code to filter the meta data.\n","\n","Adapt the code from the videos and the last exercise to filter buildings:\n","- That use the file `weather7.csv`\n","- That were built after *1960*  \n","\n","Create a new DataFrame called `filtered` that holds a subset of the meta data file that meets the criteria listed above"]},{"cell_type":"code","metadata":{"id":"ozvFkr6sqXzt","colab_type":"code","colab":{}},"source":["#YOUR CODE GOES HERE TO LOAD THE META FILE AND FILTER THE DATA ACCORDING TO THE CRITERIA\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mOyX9lLDXIp3","colab_type":"text"},"source":["Now create a new DataFrame named `filtered_year` that includes only the following columns:\n","- `primaryspaceusage`\n","- `sqm`\n","- `yearbuilt`"]},{"cell_type":"code","metadata":{"id":"R-PxDHG7I55B","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO SELECT ONLY THOSE COLUMNS\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xSqhMebsWl1U","colab_type":"text"},"source":["Now load the meter data for these buildings and this time use the `.merge()` function from Pandas.\n","\n","Hint: When you merge files, sometimes you can end up with duplicate rows -- in this case, you can use the [`.drop_duplicates()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.drop_duplicates.html) function to remove duplications. You should end up with a DataFrame with 8783 rows. \n","\n","Create a variable called `meter_data` to hold the resultant DataFrame\n"]},{"cell_type":"code","metadata":{"id":"Zf_wGriSy98G","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO CYCLE THROUGH THE FILES THAT MATCH THE FILTERED META DATA \n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Ln6wu8z-yKPo"},"source":["### Exercise 03.2.2 - Normalization and Finding Highest Consuming Building\n","\n","As you learned in the videos, it is straightforward to create area normalized calculations. In this excerice, go ahead and give that a try on the `meter_data` DataFrame that you created from the list of filtered buildings in the previous exercise.\n","\n","In this exerise, use the merged dataset from the last task to:\n","1. Calculate the daily energy consumption normalized by floor area (`sqm`) for each building\n","2. Identify the building with the most number of days that consume the most normalized energy as compared to the rest of the buildings\n","\n","First, try normalizing the daily data for the `meter_data` DataFrame by dividing by the floor area (`sqm`)"]},{"cell_type":"code","metadata":{"id":"LaJdAP0Y8m6r","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO CALCULATE THE NORMALIZED DAILY FOR ALL METERS\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qglftzM6xXtk","colab_type":"text"},"source":["Now, the task is to find the building which has the most number of days in which it has the *highest* daily normalized energy consumption as compared to the other buildings in the DataFrame. This information could be used to find the *worst* performing building in terms of number of day\n","\n","Hint: the [`.idxmax()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.idxmax.html) is useful to find the maximum value across an axis and the and [`.value_counts()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.value_counts.html) could be useful for finding the frequency counts"]},{"cell_type":"code","metadata":{"id":"RHeJ2Zbsd0hP","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO CALCULATE THE BUILDING WITH THE MOST DAYS IN WHICH IT HAS THE HIGHEST NORMALIZED CONSUMPTION\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"lrcfqAIs7RK8"},"source":["### Exercise 03.2.3 - Outliers and Filtering Quantities\n","\n","In this next exercise, let's look at the weather file that is associated with these buildings 'weather7.csv`\n","\n","There are two parts to this exercise -- the first is to identify the dates with outliers in the `TemperatureC` column according to the method from the videos\n","\n","To do this first part, plot the data to get a sense of the situation and then write a bit of code that filters out the days with outliers"]},{"cell_type":"code","metadata":{"id":"L0qstu4A6O13","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO LOAD THE WEATHER FILE AND PLOT THE TEMPERATURE COLUMN\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ubh8rBVJ8cfh","colab_type":"text"},"source":["You can see that there are several days which have outliers. Find the which days have outliers.\n","\n","Hint: You can filter out the outlier rows and the `.resample()`, `.dropna()` and the `.index` will be helpful"]},{"cell_type":"code","metadata":{"id":"AkKjU6w4qega","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO CALCULATE WHICH DAYS HAVE OUTLIERS\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GAyfv4ylmG2d","colab_type":"text"},"source":["In the second part of this exercise, find the month that has the *lowest* average `Wind SpeedKm/h` (`calm` can be considered as 0 `km/h`).\n","\n","Hints:\n","- The pandas function [`to_numeric`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_numeric.html) is useful to convert strings to numbers. Remember that there are attributes for this function that might be necessary to use if you get an error.\n","- Note that negative wind speed is unreasonable and should be removed\n","- `.resample()` can also be useful for the calculation, note again that `calm` should be taken into consideration as 0 instead of `np.nan` (not a number) when calculating the average\n","- [`.fillna()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.fillna.html) is useful for replacing blanks in the data"]},{"cell_type":"code","metadata":{"id":"W98D8qhRsT7w","colab_type":"code","colab":{}},"source":["# YOUR CODE HERE TO FIND THE MONTH WITH THE LOWEST AVERAGE WIND SPEED\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KLixs10XmnC-","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}